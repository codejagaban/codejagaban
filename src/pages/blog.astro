---
import Layout from "../layouts/Layout.astro";
import { posts } from "../data/blog.json";
import Card from "../components/Card.astro";

// Define TypeScript interfaces for better type safety
interface Post {
  title: string;
  link: string;
  date: string;
  company?: string;
}

// Group posts by year with proper typing
const postsByYear: Record<string, Post[]> = {};
posts.forEach((post: Post) => {
  if (!postsByYear[post.date]) {
    postsByYear[post.date] = [];
  }
  postsByYear[post.date].push(post);
});

// Get years and sort them in descending order
const years = Object.keys(postsByYear).sort((a, b) => Number(b) - Number(a));
---

<Layout
  title="Blogs posts and articles written by Trust Jamin"
  description="Explore technical articles and blog post crafted by Trust Jamin"
  keywords="technology insights, programming articles, software development blog,web development, serverless technologies, community management, DevOps,developer perspectives,TypeScript and Nodejs, software engineering insights."
  image="/blog.png"
>
  <section>
    <div class="container">
      <div class="content">
        <h1>Articles by Trust Jamin</h1>
        
        <div class="accordion">
          {years.map((year) => (
            <div class="accordion-item">
              <div class="accordion-header">
                <h2>{year}</h2>
                <span class="accordion-icon">+</span>
              </div>
              <div class="accordion-content">
                {postsByYear[year].map((post) => (
                  <Card
                    href={post.link}
                    title={post.title}
                    // date={post.date}
                    company={post.company}
                  />
                ))}
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  </section>
</Layout>

<style>
  .accordion {
    width: 100%;
  }
  
  .accordion-item {
    margin-bottom: 1rem;
    border-bottom: 1px solid #eaeaea;
  }
  
  .accordion-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 0;
    cursor: pointer;
    transition: all 0.3s ease;
  }
  
  .accordion-header h2 {
    margin: 0;
    font-size: 2rem;
  }
  
  .accordion-icon {
    font-size: 1.5rem;
    transition: transform 0.3s ease;
  }
  
  .accordion-content {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.6s ease;
  }
  
  .accordion-item.active .accordion-icon {
    transform: rotate(45deg);
  }
  
  .accordion-item.active .accordion-content {
    max-height: 2000px;
  }

  @media (prefers-color-scheme: dark) {
    .accordion-item {
      border-color: #444;
    }
  }
</style>

<script>
  // This will run every time the component is mounted, even after navigation
  function setupAccordion() {
    const accordionItems = document.querySelectorAll('.accordion-item');
    // Open the first year by default
    if (accordionItems.length > 0) {
      accordionItems[0].classList.add('active');
    }
    Array.from(accordionItems).forEach(item => {
      const header = item.querySelector('.accordion-header');
      if (header) {
        // Remove existing listeners first to prevent duplicates
        const newHeader = header.cloneNode(true);
        if (header.parentNode) {
          header.parentNode.replaceChild(newHeader, header);
        }
        newHeader.addEventListener('click', () => {
          item.classList.toggle('active');
        });
      }
    });
  }

  // Run on initial load
  setupAccordion();
  // Also run when navigating to this page via view transitions
  document.addEventListener('astro:page-load', setupAccordion);
</script>
